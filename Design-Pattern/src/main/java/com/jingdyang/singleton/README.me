简介
单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一，这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。
这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象，也就是说不能使用new关键字来创建对象。

单例模式是一种创建型设计模式，它确保一个类只有一个实例，并提供了一个全局访问点来访问该实例。

单例设计模式分类两种：
* 饿汉式：类加载就会导致该单实例对象被创建。
* 懒汉式：类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建。

![单例模式](D:\workspace\GitHub\JavaStudy\Design-Pattern\src\main\java\com\jingdyang\singleton\singleton.png)

### 注意事项

- **线程安全**：`getInstance()` 方法中需要使用同步锁 `synchronized (Singleton.class)` 防止多线程同时进入造成实例被多次创建。
- **延迟初始化**：实例在第一次调用 `getInstance()` 方法时创建。
- **序列化和反序列化**：重写 `readResolve` 方法以确保反序列化时不会创建新的实例。
- **反射攻击**：在构造函数中添加防护代码，防止通过反射创建新实例。
- **类加载器问题**：注意复杂类加载环境可能导致的多个实例问题。

参考：
https://www.runoob.com/design-pattern/singleton-pattern.html
https://pdai.tech/md/dev-spec/pattern/2_singleton.html
https://blog.csdn.net/weixin_63834061/article/details/130286426